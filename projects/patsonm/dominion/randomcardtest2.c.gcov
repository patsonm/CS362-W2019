        -:    0:Source:randomcardtest2.c
        -:    0:Graph:randomcardtest2.gcno
        -:    0:Data:randomcardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Test card fro create hall
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "assert.h"
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12:#define TESTCARD "Great Hall"
        -:   13:
        1:   14:int main(){
        -:   15:    
        -:   16:    
        -:   17:     //set num of teset here
        1:   18:    int numTest=100;
        -:   19:    
        -:   20:    //variables for counting results
        1:   21:    int gameStateCreated=0;
        -:   22:    
        -:   23:    
        1:   24:    int GreatHallNotRun=0;
        1:   25:    int GreatHallRun=0;
        1:   26:    int sameplayer=0;
        1:   27:    int differentplayer=0;
        1:   28:    int actionsSame=0;
        1:   29:    int actionsDifferent=0;
        1:   30:    int handDecreased=0;
        1:   31:    int handEqual=0;
        -:   32:    
        -:   33:
        -:   34:        struct gameState G;
        -:   35:    struct gameState S;
        -:   36:    
        -:   37:    
      101:   38:    for (int z=0; z < numTest; z++){
        -:   39:    
        -:   40:    
        -:   41:    
        -:   42:    int returnValue;
        -:   43:    struct gameState G;
        -:   44:    //change these variables to test
        -:   45:    //select random amount of players between 2 and 4
        -:   46:    //per dominip rules
        -:   47:    int r, n, k;
      100:   48:    n=4;
      100:   49:    k=2;
      100:   50:    r = rand() % (n + 1) + k;
      100:   51:    int players=r;
        -:   52:    
        -:   53:    
        -:   54:    //select random seed between 1-500
        -:   55:    
      100:   56:    n=500;
      100:   57:    k=1;
      100:   58:    r = rand() % (n + 1) + k;
        -:   59:    
      100:   60:    int randomSeed=r;
      100:   61:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   62:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   63:    //create a hand to pass in
        -:   64:    
        -:   65:    
        -:   66:    //if game is created, print 
      100:   67:    returnValue=initializeGame(players,hand,randomSeed, &G);
        -:   68:    
      100:   69:    if(returnValue == 0)
        -:   70:    {
       57:   71:    gameStateCreated++;
        -:   72:    //printf("**Gamestate Created**\n");  
        -:   73:    //printf("\n");
        -:   74:    }    
        -:   75:        
        -:   76:    
      100:   77:    int player1=G.whoseTurn;
        -:   78:    int player2;
      100:   79:    int actions=G.numActions;
        -:   80:    int actions2;
      100:   81:    int handCount1=G.handCount[1];
        -:   82:    int handCount2;
        -:   83:    //same player
        -:   84:    //+1 Card (increase hand)
        -:   85:    //+1 Action(increase action)
        -:   86:    int result;
      100:   87:    result= cardEffect(great_hall, 0, 0, 0, &G, 10, 0);
        -:   88:     //set gamestates equal
      100:   89:    S=G;
      100:   90:    if(result==0){
        -:   91:    //printf("PASS: Greathall ran");
        -:   92:        //printf("\n");
      100:   93:        GreatHallRun++;
        -:   94:    }
        -:   95:        
        -:   96:        
      100:   97:    if(result!=0){
        -:   98:    //printf("Fail: Greathall ran");
        -:   99:        //printf("\n");
    #####:  100:        GreatHallNotRun++;
        -:  101:    }    
        -:  102:    
      100:  103:    player2=S.whoseTurn;
      100:  104:    if(player1==player2){
        -:  105:    //printf("PASS: Same Player is Active");
        -:  106:    //printf("\n");
      100:  107:    sameplayer++;
        -:  108:    }
        -:  109:    
      100:  110:    if(player1!=player2){
        -:  111:    //printf("FAIL: Same Player is Active");
        -:  112:    //printf("\n");
    #####:  113:    differentplayer++;
        -:  114:    } 
        -:  115:        
      100:  116:    actions2=S.numActions;
      100:  117:    if(actions==actions2){
        -:  118:    //printf("PASS: Same number of actions left");
        -:  119:    //printf("\n");
    #####:  120:        actionsSame++;
        -:  121:    }
        -:  122:        
      100:  123:     if(actions!=actions2){
        -:  124:    //printf("FAIL: Same number of actions left");
        -:  125:    //printf("\n");
      100:  126:         actionsDifferent++;
        -:  127:     }    
        -:  128:    
      100:  129:    handCount2=S.handCount[1];
      100:  130:    if(handCount2<=handCount1){
        -:  131:    //printf("PASS: Hand Count has equal, one card removed");
        -:  132:    //printf("\n");
      100:  133:        handEqual++;
        -:  134:    
        -:  135:    }
        -:  136:        
      100:  137:    if(handCount2>handCount1){
        -:  138:    //printf("FAIL: Hand Count has increased");
        -:  139:    //printf("\n");
    #####:  140:        handDecreased++;
        -:  141:    
        -:  142:    }    
        -:  143:        
        -:  144:    
        -:  145:        
        -:  146:    
        -:  147:    
        -:  148:    
        -:  149:        
        -:  150:       
        -:  151:}
        -:  152:    
        1:  153:    printf("Random Card Test 2:\n");
        1:  154:    printf("Great Hall:\n");
        -:  155:    
        1:  156:    printf("The Test was run %d times\n", numTest);
        -:  157:    //printf("Game States Created:  %d\n", gameStateCreated);
        1:  158:    printf("Card was successfully run:  %d\n", GreatHallRun);
        1:  159:    printf("Fail: Card was UNsuccessfully run:  %d\n", GreatHallNotRun);
        1:  160:     printf("Same player is active (intended result):  %d\n", sameplayer);
        1:  161:     printf("Fail: Player should not change:  %d\n", differentplayer);
        1:  162:    printf("Same player is active (intended result):  %d\n", sameplayer);
        1:  163:     printf("Fail: Player should not change:  %d\n", differentplayer);
        -:  164:
        1:  165:     printf("The Hand Number of actions is same (intended results):  %d\n", actionsSame);
        1:  166:     printf("Fail: Number of actions different:  %d\n", actionsDifferent);
        -:  167:     
        1:  168:    printf("The hand is equal to old hand size after draw (intended result): %d\n" , handEqual);
        1:  169:    printf("Fail: There is a hand mismatch: %d\n" , handDecreased);
        -:  170:
        -:  171:    
        1:  172:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  173:        
        1:  174:        return 0;
        -:  175:}
        -:  176:    
        -:  177:    
        -:  178:         
        -:  179:         
