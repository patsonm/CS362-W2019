The Test was run 5000 times
Card was successfully run:  5000
Fail: Card was UNsuccessfully run:  0
The Hand Increased (intended results):  0
Fail: Hand did not increase, it decreased:  5000
Fail: Hand count is equal:  5000
Same player is active (intended result):  5000
Fail: Player should not change:  0
Deck count decreased (intended result):  0
Fail Deck count did not decrease:  5000

 >>>>> SUCCESS: Testing complete smithy <<<<<

Random Card Test 2:
Great Hall:
The Test was run 100 times
Card was successfully run:  100
Fail: Card was UNsuccessfully run:  0
Same player is active (intended result):  100
Fail: Player should not change:  0
Same player is active (intended result):  100
Fail: Player should not change:  0
The Hand Number of actions is same (intended results):  0
Fail: Number of actions different:  100
The hand is equal to old hand size after draw (intended result): 100
Fail: There is a hand mismatch: 0

 >>>>> SUCCESS: Testing complete Great Hall <<<<<

Random Card Test :
Adventure :
The Test was run 100 times
Game States Created:  57
Card was successfully run:  57
Card was UNsuccessfully run:  0
Two cards were successfully drawn:  0
Two cards were UNsuccessfully drawn:  57
The treasure amount in hand increased by two:  0
The treasure amount in hand did not increase:  57

 >>>>> SUCCESS: Testing complete adventure <<<<<

File 'randomcardtest1.c'
Lines executed:93.65% of 63
Creating 'randomcardtest1.c.gcov'

        -:    0:Source:randomcardtest1.c
        -:    0:Graph:randomcardtest1.gcno
        -:    0:Data:randomcardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://testcard for smithy
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "assert.h"
        -:    9:#include <time.h>
        -:   10:
        -:   11:#define TESTCARD "smithy"
        -:   12:
        -:   13:
        1:   14:int main()
        -:   15:{
        -:   16:    //set num of test here
        1:   17:    int numTest =5000;
        -:   18:    
        -:   19:    //variables for checking game
        -:   20:    int gameStateCreated, smithyRun, smithyNotRun, handIncreased, handDecreased, handEqual, sameplayer, differentplayer, deckDecrease, deckIncrease;
        -:   21:    
        1:   22:    gameStateCreated=0;
        1:   23:    smithyRun=0;
        1:   24:    smithyNotRun=0;
        1:   25:    handIncreased=0;   
        1:   26:    handDecreased=0;   
        1:   27:    handEqual=0;   
        1:   28:    sameplayer=0;
        1:   29:    differentplayer=0;
        1:   30:    deckDecrease=0;
        1:   31:    deckIncrease=0;
        -:   32:    
        -:   33:    
        -:   34:    //create games tates
        -:   35:    
        -:   36:    struct gameState G;
        -:   37:    struct gameState S;
        -:   38:    
        -:   39:
     5001:   40:    for (int z=0; z < numTest; z++)
        -:   41:    {
        -:   42:        int returnValue;
        -:   43:        
        -:   44:        struct gameState G;
        -:   45:        struct gameState S;
        -:   46:         //change these variables to test
        -:   47:        //select random amount of players between 2 and 4
        -:   48:        //per dominip rules
        -:   49:        int r, n, k;
     5000:   50:        n=4;
     5000:   51:        k=2;
     5000:   52:        r = rand() % (n + 1) + k;
     5000:   53:        int players=r;
        -:   54:
        -:   55:
        -:   56:        //select random seed between 1-500
        -:   57:
     5000:   58:        n=500;
     5000:   59:        k=1;
     5000:   60:        r = rand() % (n + 1) + k;
        -:   61:
     5000:   62:        int randomSeed=r;
     5000:   63:        int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, duchy, tribute};
        -:   64:        
     5000:   65:         returnValue=initializeGame(players,hand,randomSeed, &G);
        -:   66:        
     5000:   67:        if(returnValue == 0)
        -:   68:            {
     2983:   69:            gameStateCreated++;
        -:   70:            //printf("**Gamestate Created**\n");  
        -:   71:            //printf("\n");
        -:   72:            }
     5000:   73:        S=G;
        -:   74:        //intial hand count
     5000:   75:        int handCount1=G.handCount[1];
     5000:   76:        int player1=G.whoseTurn;
     5000:   77:        int deckCountInitial= G.deckCount[1];
        -:   78:        //player should try three cards
        -:   79:
        -:   80:	
        -:   81:	       //test valid input
        -:   82:    
     5000:   83:        returnValue = cardEffect(smithy, 0, 0, 0, &G, 10, 0);
     5000:   84:         if(returnValue==0)
        -:   85:        {
        -:   86:        //printf("PASS:smithy run");
        -:   87:        //printf("\n");
     5000:   88:             smithyRun++;
        -:   89:        }
        -:   90:        
     5000:   91:        if(returnValue!=0)
        -:   92:        {
        -:   93:        //printf("PASS:smithy run");
        -:   94:        //printf("\n");
    #####:   95:             smithyNotRun++;
        -:   96:        }
        -:   97:        
        -:   98:        
     5000:   99:        int handCount2=S.handCount[1];
     5000:  100:        int player2=S.whoseTurn;
     5000:  101:        int deckCountInitial2= S.deckCount[1];
        -:  102:      //same hand?
     5000:  103:        if(handCount2>=(handCount1+3)){
    #####:  104:        handIncreased++;
        -:  105:        }   
        -:  106:        
     5000:  107:        if(handCount2==handCount1){
     5000:  108:        handEqual++;
        -:  109:        }
        -:  110:        
     5000:  111:        if(handCount2<(handCount1+3)){
     5000:  112:        handDecreased++;
        -:  113:        }
        -:  114:        //same player
     5000:  115:        if(player1==player2){
     5000:  116:        sameplayer++;
        -:  117:        }
        -:  118:
     5000:  119:        if(player1!=player2){
    #####:  120:        differentplayer++;
        -:  121:        } 
        -:  122:        
        -:  123:        //deck count decreased    
     5000:  124:        if(deckCountInitial>deckCountInitial2) {
    #####:  125:           deckDecrease++; 
        -:  126:        }
        -:  127:        
     5000:  128:        if(deckCountInitial<=deckCountInitial2) {
     5000:  129:        deckIncrease++;
        -:  130:        }
        -:  131:        
        -:  132:       
        -:  133:        
        -:  134:        
        -:  135:    
        -:  136:    }
        1:  137:    printf("The Test was run %d times\n", numTest);
        -:  138:    //printf("Game States Created:  %d\n", gameStateCreated);
        1:  139:    printf("Card was successfully run:  %d\n", smithyRun);
        1:  140:    printf("Fail: Card was UNsuccessfully run:  %d\n", smithyNotRun);
        -:  141:    
        1:  142:   printf("The Hand Increased (intended results):  %d\n", handIncreased);
        1:  143:     printf("Fail: Hand did not increase, it decreased:  %d\n", handDecreased);
        1:  144:       printf("Fail: Hand count is equal:  %d\n", handEqual);
        -:  145:    
        1:  146:      printf("Same player is active (intended result):  %d\n", sameplayer);
        1:  147:     printf("Fail: Player should not change:  %d\n", differentplayer);
        -:  148:    
        1:  149:    printf("Deck count decreased (intended result):  %d\n", deckDecrease);
        1:  150:     printf("Fail Deck count did not decrease:  %d\n", deckIncrease);
        1:  151:     printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  152:        
        -:  153:        
        -:  154:  
        -:  155:        
        1:  156:	return 0;
        -:  157:}
        -:  158:    
File 'randomcardtest2.c'
Lines executed:93.65% of 63
Creating 'randomcardtest2.c.gcov'

        -:    0:Source:randomcardtest2.c
        -:    0:Graph:randomcardtest2.gcno
        -:    0:Data:randomcardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Test card fro create hall
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "assert.h"
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12:#define TESTCARD "Great Hall"
        -:   13:
        1:   14:int main(){
        -:   15:    
        -:   16:    
        -:   17:     //set num of teset here
        1:   18:    int numTest=100;
        -:   19:    
        -:   20:    //variables for counting results
        1:   21:    int gameStateCreated=0;
        -:   22:    
        -:   23:    
        1:   24:    int GreatHallNotRun=0;
        1:   25:    int GreatHallRun=0;
        1:   26:    int sameplayer=0;
        1:   27:    int differentplayer=0;
        1:   28:    int actionsSame=0;
        1:   29:    int actionsDifferent=0;
        1:   30:    int handDecreased=0;
        1:   31:    int handEqual=0;
        -:   32:    
        -:   33:
        -:   34:        struct gameState G;
        -:   35:    struct gameState S;
        -:   36:    
        -:   37:    
      101:   38:    for (int z=0; z < numTest; z++){
        -:   39:    
        -:   40:    
        -:   41:    
        -:   42:    int returnValue;
        -:   43:    struct gameState G;
        -:   44:    //change these variables to test
        -:   45:    //select random amount of players between 2 and 4
        -:   46:    //per dominip rules
        -:   47:    int r, n, k;
      100:   48:    n=4;
      100:   49:    k=2;
      100:   50:    r = rand() % (n + 1) + k;
      100:   51:    int players=r;
        -:   52:    
        -:   53:    
        -:   54:    //select random seed between 1-500
        -:   55:    
      100:   56:    n=500;
      100:   57:    k=1;
      100:   58:    r = rand() % (n + 1) + k;
        -:   59:    
      100:   60:    int randomSeed=r;
      100:   61:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   62:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   63:    //create a hand to pass in
        -:   64:    
        -:   65:    
        -:   66:    //if game is created, print 
      100:   67:    returnValue=initializeGame(players,hand,randomSeed, &G);
        -:   68:    
      100:   69:    if(returnValue == 0)
        -:   70:    {
       57:   71:    gameStateCreated++;
        -:   72:    //printf("**Gamestate Created**\n");  
        -:   73:    //printf("\n");
        -:   74:    }    
        -:   75:        
        -:   76:    
      100:   77:    int player1=G.whoseTurn;
        -:   78:    int player2;
      100:   79:    int actions=G.numActions;
        -:   80:    int actions2;
      100:   81:    int handCount1=G.handCount[1];
        -:   82:    int handCount2;
        -:   83:    //same player
        -:   84:    //+1 Card (increase hand)
        -:   85:    //+1 Action(increase action)
        -:   86:    int result;
      100:   87:    result= cardEffect(great_hall, 0, 0, 0, &G, 10, 0);
        -:   88:     //set gamestates equal
      100:   89:    S=G;
      100:   90:    if(result==0){
        -:   91:    //printf("PASS: Greathall ran");
        -:   92:        //printf("\n");
      100:   93:        GreatHallRun++;
        -:   94:    }
        -:   95:        
        -:   96:        
      100:   97:    if(result!=0){
        -:   98:    //printf("Fail: Greathall ran");
        -:   99:        //printf("\n");
    #####:  100:        GreatHallNotRun++;
        -:  101:    }    
        -:  102:    
      100:  103:    player2=S.whoseTurn;
      100:  104:    if(player1==player2){
        -:  105:    //printf("PASS: Same Player is Active");
        -:  106:    //printf("\n");
      100:  107:    sameplayer++;
        -:  108:    }
        -:  109:    
      100:  110:    if(player1!=player2){
        -:  111:    //printf("FAIL: Same Player is Active");
        -:  112:    //printf("\n");
    #####:  113:    differentplayer++;
        -:  114:    } 
        -:  115:        
      100:  116:    actions2=S.numActions;
      100:  117:    if(actions==actions2){
        -:  118:    //printf("PASS: Same number of actions left");
        -:  119:    //printf("\n");
    #####:  120:        actionsSame++;
        -:  121:    }
        -:  122:        
      100:  123:     if(actions!=actions2){
        -:  124:    //printf("FAIL: Same number of actions left");
        -:  125:    //printf("\n");
      100:  126:         actionsDifferent++;
        -:  127:     }    
        -:  128:    
      100:  129:    handCount2=S.handCount[1];
      100:  130:    if(handCount2<=handCount1){
        -:  131:    //printf("PASS: Hand Count has equal, one card removed");
        -:  132:    //printf("\n");
      100:  133:        handEqual++;
        -:  134:    
        -:  135:    }
        -:  136:        
      100:  137:    if(handCount2>handCount1){
        -:  138:    //printf("FAIL: Hand Count has increased");
        -:  139:    //printf("\n");
    #####:  140:        handDecreased++;
        -:  141:    
        -:  142:    }    
        -:  143:        
        -:  144:    
        -:  145:        
        -:  146:    
        -:  147:    
        -:  148:    
        -:  149:        
        -:  150:       
        -:  151:}
        -:  152:    
        1:  153:    printf("Random Card Test 2:\n");
        1:  154:    printf("Great Hall:\n");
        -:  155:    
        1:  156:    printf("The Test was run %d times\n", numTest);
        -:  157:    //printf("Game States Created:  %d\n", gameStateCreated);
        1:  158:    printf("Card was successfully run:  %d\n", GreatHallRun);
        1:  159:    printf("Fail: Card was UNsuccessfully run:  %d\n", GreatHallNotRun);
        1:  160:     printf("Same player is active (intended result):  %d\n", sameplayer);
        1:  161:     printf("Fail: Player should not change:  %d\n", differentplayer);
        1:  162:    printf("Same player is active (intended result):  %d\n", sameplayer);
        1:  163:     printf("Fail: Player should not change:  %d\n", differentplayer);
        -:  164:
        1:  165:     printf("The Hand Number of actions is same (intended results):  %d\n", actionsSame);
        1:  166:     printf("Fail: Number of actions different:  %d\n", actionsDifferent);
        -:  167:     
        1:  168:    printf("The hand is equal to old hand size after draw (intended result): %d\n" , handEqual);
        1:  169:    printf("Fail: There is a hand mismatch: %d\n" , handDecreased);
        -:  170:
        -:  171:    
        1:  172:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  173:        
        1:  174:        return 0;
        -:  175:}
        -:  176:    
        -:  177:    
        -:  178:         
        -:  179:         
File 'randomtestadventurer.c'
Lines executed:94.34% of 53
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/*Michael Patson*/
        -:    3://reveals cards from deck until two treasure
        -:    4:
        -:    5://This is the random test for the adventure card
        -:    6://the time library is used to randomization
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include <stdio.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include "dominion_helpers.h"
        -:   13:#include "assert.h"
        -:   14:#include <time.h>
        -:   15:
        -:   16:#define TESTCARD "adventure"
        -:   17:
        -:   18:
        1:   19:int main()
        -:   20:{
        -:   21:    //set num of test here
        1:   22:    int numTest =100;
        -:   23:    
        -:   24:    //game counter varaibles
        1:   25:    int gameStateCreated=0;
        1:   26:    int cardRun=0;
        1:   27:    int cardRunFail=0;
        1:   28:    int cardFunctionFail=0;
        1:   29:    int cardFunction=0;
        1:   30:    int treasureFail=0;
        1:   31:    int treasure=0;
        -:   32:    
        -:   33:    
        -:   34:    struct gameState G;
        -:   35:    struct gameState S;
        -:   36:    
      101:   37:    for (int z=0; z < numTest; z++){
        -:   38:    int returnValue;
        -:   39:    int count;
        -:   40:    //change these variables to test
        -:   41:    //select random amount of players between 2 and 4
        -:   42:    //per dominip rules
        -:   43:    int r, n, k;
      100:   44:    n=4;
      100:   45:    k=2;
      100:   46:    r = rand() % (n + 1) + k;
      100:   47:    int players=r;
        -:   48:    
        -:   49:    
        -:   50:    //select random seed between 1-500
        -:   51:    
      100:   52:    n=50;
      100:   53:    k=1;
      100:   54:    r = rand() % (n + 1) + k;
        -:   55:    
      100:   56:    int randomSeed=r;
      100:   57:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, duchy, tribute};
        -:   58:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   59:    //create a hand to pass in
        -:   60:    
        -:   61:    //if game is created, print 
      100:   62:    returnValue=initializeGame(players,hand,randomSeed, &G);
        -:   63:    
        -:   64:        
        -:   65:        //set gamestates equal
      100:   66:    S=G;
      100:   67:    if(returnValue == 0){
        -:   68:    {
       57:   69:    gameStateCreated++;
        -:   70:    //printf("**Gamestate Created**\n");  
        -:   71:    //printf("\n");
        -:   72:    }
        -:   73:	int intialHand;
       57:   74:     intialHand= G.handCount[G.whoseTurn];
        -:   75:	//check card value has changed
        -:   76:    
        -:   77:	
       57:   78:    returnValue=cardEffect(great_hall, 0, 0, 0, &G, 10, 0);
       57:   79:    if(returnValue==0){
        -:   80:    //printf("Pass: Card ran successfully");
       57:   81:        cardRun++;
        -:   82:       // printf("\n");
        -:   83:    }
        -:   84:    
       57:   85:     if(returnValue!=0){
        -:   86:    //printf("FAIL: Card did not run successfully");
        -:   87:     //printf("\n");
    #####:   88:         cardRunFail++;
        -:   89:     }    
        -:   90:        
        -:   91:    int newHand;
       57:   92:    newHand= S.handCount[S.whoseTurn];
       57:   93:    if((intialHand+2)==newHand){
        -:   94:    //printf("PASS: New hand is two more, two cards were drawn");
        -:   95:    //printf("\n");
    #####:   96:    cardFunction++;
        -:   97:    }
       57:   98:     if((intialHand+2)!=newHand){
        -:   99:    //printf("FAil: Two cards were not drawn");
        -:  100:     //printf("\n");
       57:  101:      cardFunctionFail++;
        -:  102:     }
        -:  103:    int x;
      342:  104:    for(x = 0; x < G.handCount[G.whoseTurn]; x++){
      285:  105:		if (G.hand[G.whoseTurn][x] == copper || G.hand[G.whoseTurn][x] == silver || G.hand[G.whoseTurn][x] == gold){
      219:  106:			count++;
        -:  107:		}
        -:  108:			
        -:  109:        }
       57:  110:	if(count==2){
        -:  111:    //printf("PASS: Two Treasure Cards are in hand");
        -:  112:    //printf("\n")
    #####:  113:    treasure++;   
        -:  114:        ;
        -:  115:    }
       57:  116:        if(count!=2){
        -:  117:    //printf("FAIL: There are not two treasure cards in hand");
        -:  118:    //printf("\n");
       57:  119:    treasureFail++;        
        -:  120:        }
        -:  121:    }
        -:  122:        //printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  123:    }
        -:  124:    
        -:  125:    
        1:  126:    printf("Random Card Test :\n");
        1:  127:    printf("Adventure :\n");
        1:  128:    printf("The Test was run %d times\n", numTest);
        1:  129:    printf("Game States Created:  %d\n", gameStateCreated);
        1:  130:    printf("Card was successfully run:  %d\n", cardRun);
        1:  131:    printf("Card was UNsuccessfully run:  %d\n", cardRunFail);
        1:  132:   printf("Two cards were successfully drawn:  %d\n", cardFunction);
        1:  133:     printf("Two cards were UNsuccessfully drawn:  %d\n", cardFunctionFail);
        1:  134:      printf("The treasure amount in hand increased by two:  %d\n", treasure);
        1:  135:     printf("The treasure amount in hand did not increase:  %d\n", treasureFail);
        1:  136:     printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  137:   
        -:  138:    
        -:  139:    
        1:  140:	return 0;
        -:  141:}
File 'dominion.c'
Lines executed:21.75% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     2760:    8:int compare(const void* a, const void* b) {
     2760:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     2760:   11:  if (*(int*)a < *(int*)b)
      736:   12:    return -1;
     2024:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
      100:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       43:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       57:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      627:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     6270:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     5700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       57:   73:  if (numPlayers == 2)
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       46:   77:  else if (numPlayers == 3)
        -:   78:    {
       22:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       24:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       57:   87:  if (numPlayers == 2)
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       46:   95:      state->supplyCount[estate] = 12;
       46:   96:      state->supplyCount[duchy] = 12;
       46:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       57:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       57:  102:  state->supplyCount[silver] = 40;
       57:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1197:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    10089:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     9405:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      456:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
       22:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       92:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      342:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      456:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8949:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      241:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      184:  140:      state->deckCount[i] = 0;
      736:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      552:  143:	  state->deck[i][j] = estate;
      552:  144:	  state->deckCount[i]++;
        -:  145:	}
     1472:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1288:  148:	  state->deck[i][j] = copper;
     1288:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      241:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      184:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      241:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      184:  166:      state->handCount[i] = 0;
      184:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1596:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1539:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       57:  182:  state->outpostPlayed = 0;
       57:  183:  state->phase = 0;
       57:  184:  state->numActions = 1;
       57:  185:  state->numBuys = 1;
       57:  186:  state->playedCardCount = 0;
       57:  187:  state->whoseTurn = 0;
       57:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      342:  192:  for (it = 0; it < 5; it++){
      285:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       57:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       57:  198:  return 0;
        -:  199:}
        -:  200:
      184:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      184:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      184:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      184:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2208:  214:  while (state->deckCount[player] > 0) {
     1840:  215:    card = floor(Random() * state->deckCount[player]);
     1840:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1840:  217:    newDeckPos++;
     6026:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     4186:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1840:  221:    state->deckCount[player]--;
        -:  222:  }
     2024:  223:  for (i = 0; i < newDeckPos; i++) {
     1840:  224:    state->deck[player][i] = newDeck[i];
     1840:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      184:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       57:  346:int whoseTurn(struct gameState *state) {
       57:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      342:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      342:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      342:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      342:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      342:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      342:  576:    state->deckCount[player]--;
      342:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      342:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// the following func___card are modified for assignment2
    #####:  647:int funcAdventurer(struct gameState *state)
        -:  648:{
        -:  649:    
    #####:  650:  int currentPlayer = whoseTurn(state);
        -:  651:  int temphand[MAX_HAND];// moved above the if statement
    #####:  652:  int drawntreasure=0;
        -:  653:  int cardDrawn;
    #####:  654:  int z = 0;// this is the counter for the temp hand
        -:  655:    
    #####:  656:    while(drawntreasure<2)
        -:  657:    {
    #####:  658:	if (state->deckCount[currentPlayer] <1)
        -:  659:        {//if the deck is empty we need to shuffle discard and add to deck
    #####:  660:          shuffle(currentPlayer, state);
        -:  661:        }
    #####:  662:        drawCard(currentPlayer, state);
        -:  663:        //was cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####:  664:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  665:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:          drawntreasure++;
        -:  667:        else
        -:  668:        {
    #####:  669:          temphand[z]=cardDrawn;
    #####:  670:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  671:          z++;
        -:  672:	    }
        -:  673:    }
    #####:  674:      while(z-1>=0)
        -:  675:      {
    #####:  676:	   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  677:	   z=z-1;
        -:  678:      }
        -:  679:
        -:  680:    
    #####:  681:    return 0;
        -:  682:    
        -:  683:}
        -:  684:
    #####:  685:int funcSmithy(struct gameState *state, int handPos)
        -:  686:{
    #####:  687:    int i = 0;
    #####:  688:    int currentPlayer = whoseTurn(state);
        -:  689:      //+3 Cards
        -:  690:    //BUG, <= was previouls <
    #####:  691:      for (i = 0; i < 3; i++)
        -:  692:	{
    #####:  693:	  drawCard(currentPlayer, state);
        -:  694:	}
        -:  695:			
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
    #####:  698:      return 0;
        -:  699:}
        -:  700:
       57:  701:int funcGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -:  702:        {
        -:  703:          //+1 Card
       57:  704:          drawCard(currentPlayer, state);
        -:  705:
        -:  706:          //+1 Actions
        -:  707:            //bug at -- instead of ++
       57:  708:          state->numActions++;
        -:  709:
        -:  710:          //discard card from hand
       57:  711:          discardCard(handPos, currentPlayer, state, 0);
       57:  712:          return 0;
        -:  713:        }
        -:  714:
    #####:  715: int funcSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos, int currentPlayer)
        -:  716:   {
    #####:  717:          if (choice1 == 1)
        -:  718:        {
        -:  719:          //+2 cards
    #####:  720:          drawCard(currentPlayer, state);
    #####:  721:          drawCard(currentPlayer, state);
        -:  722:        }
    #####:  723:          else if (choice1 == 2)
        -:  724:        {
        -:  725:          //+2 coins
    #####:  726:          state->coins = state->coins + 2;
        -:  727:        }
        -:  728:          else
        -:  729:        {
        -:  730:          //trash 2 cards in hand
    #####:  731:          discardCard(choice2, currentPlayer, state, 1);
    #####:  732:          discardCard(choice3, currentPlayer, state, 1);
        -:  733:        }
        -:  734:
        -:  735:          //discard card from hand
    #####:  736:          discardCard(handPos, currentPlayer, state, 0);
    #####:  737:          return 0;
        -:  738:    }
        -:  739:
    #####:  740:  int funcSalvager(struct gameState *state, int choice1, int currentPlayer, int handPos)
        -:  741:        {
        -:  742:          //+1 buy
        -:  743:          //state->numBuys++;
        -:  744:
    #####:  745:          if (choice1)
        -:  746:        {
        -:  747:          //gain coins equal to trashed card
    #####:  748:          state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  749:          //trash card
    #####:  750:          discardCard(choice1, currentPlayer, state, 1);	
        -:  751:        }
    #####:  752:        state->numBuys++;//added this here, logic out of order
        -:  753:          //discard card
    #####:  754:          discardCard(handPos, currentPlayer, state, 0);
    #####:  755:          return 0;
        -:  756:        }
        -:  757:
       57:  758:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  759:{
        -:  760:  int i;
        -:  761:  int j;
        -:  762:  int k;
        -:  763:  int x;
        -:  764:  int index;
       57:  765:  int currentPlayer = whoseTurn(state);
       57:  766:  int nextPlayer = currentPlayer + 1;
        -:  767:
       57:  768:  int tributeRevealedCards[2] = {-1, -1};
        -:  769:  int temphand[MAX_HAND];// moved above the if statement
        -:  770:  //int z = 0;// this is the counter for the temp hand
       57:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
       57:  777:  switch( card ) 
        -:  778:    {
        -:  779:          //modified per assignmnet 2
        -:  780:    case adventurer:
    #####:  781:        return funcAdventurer(state);
        -:  782: 		
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:		
    #####:  871:      if (choice2 > treasure_map || choice2 < curse)
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 2, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);			
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case remodel:
    #####:  899:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 0, currentPlayer);
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:
        -:  921:
    #####:  922:      return 0;
        -:  923:	//modified per assignmen2	
        -:  924:    case smithy:
    #####:  925:        return funcSmithy(state, handPos);
        -:  926:		
        -:  927:    case village:
        -:  928:      //+1 Card
    #####:  929:      drawCard(currentPlayer, state);
        -:  930:			
        -:  931:      //+2 Actions
    #####:  932:      state->numActions = state->numActions + 2;
        -:  933:			
        -:  934:      //discard played card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case baron:
    #####:  939:      state->numBuys++;//Increase buys by 1!
    #####:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  941:	int p = 0;//Iterator for hand!
    #####:  942:	int card_not_discarded = 1;//Flag for discard set!
    #####:  943:	while(card_not_discarded){
    #####:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  947:	    state->discardCount[currentPlayer]++;
    #####:  948:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
    #####:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  952:	    state->handCount[currentPlayer]--;
    #####:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
    #####:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
    #####:  960:	    if (supplyCount(estate, state) > 0){
    #####:  961:	      gainCard(estate, state, 0, currentPlayer);
    #####:  962:	      state->supplyCount[estate]--;//Decrement estates
    #####:  963:	      if (supplyCount(estate, state) == 0){
    #####:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
    #####:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
    #####:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
    #####:  977:	if (supplyCount(estate, state) > 0){
    #####:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  979:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  980:	  if (supplyCount(estate, state) == 0){
    #####:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
    #####:  987:      return 0;
        -:  988:	//modified per assignmen2	
        -:  989:    case great_hall:
       57:  990:          return funcGreatHall(state, currentPlayer, handPos);
        -:  991:		
        -:  992:    case minion:
        -:  993:      //+1 action
    #####:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
    #####:  997:      discardCard(handPos, currentPlayer, state, 0);
        -:  998:			
    #####:  999:      if (choice1)		//+2 coins
        -: 1000:	{
    #####: 1001:	  state->coins = state->coins + 2;
        -: 1002:	}
        -: 1003:			
    #####: 1004:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1005:	{
        -: 1006:	  //discard hand
    #####: 1007:	  while(numHandCards(state) > 0)
        -: 1008:	    {
    #####: 1009:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1010:	    }
        -: 1011:				
        -: 1012:	  //draw 4
    #####: 1013:	  for (i = 0; i < 4; i++)
        -: 1014:	    {
    #####: 1015:	      drawCard(currentPlayer, state);
        -: 1016:	    }
        -: 1017:				
        -: 1018:	  //other players discard hand and redraw if hand size > 4
    #####: 1019:	  for (i = 0; i < state->numPlayers; i++)
        -: 1020:	    {
    #####: 1021:	      if (i != currentPlayer)
        -: 1022:		{
    #####: 1023:		  if ( state->handCount[i] > 4 )
        -: 1024:		    {
        -: 1025:		      //discard hand
    #####: 1026:		      while( state->handCount[i] > 0 )
        -: 1027:			{
    #####: 1028:			  discardCard(handPos, i, state, 0);
        -: 1029:			}
        -: 1030:							
        -: 1031:		      //draw 4
    #####: 1032:		      for (j = 0; j < 4; j++)
        -: 1033:			{
    #####: 1034:			  drawCard(i, state);
        -: 1035:			}
        -: 1036:		    }
        -: 1037:		}
        -: 1038:	    }
        -: 1039:				
        -: 1040:	}
    #####: 1041:      return 0;
        -: 1042://modified per assignment 2		
        -: 1043:    case steward:
    #####: 1044:          return funcSteward(state, choice1, choice2, choice3, handPos, currentPlayer);
        -: 1045:          
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
        -: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
        -: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:	
        -: 1223:          
        -: 1224:    //per assignmen2	
        -: 1225:    case salvager:
    #####: 1226:    return funcSalvager(state, choice1, currentPlayer, handPos); 
        -: 1227:          
        -: 1228:	
        -: 1229:    case sea_hag:
    #####: 1230:      for (i = 0; i < state->numPlayers; i++){
    #####: 1231:	if (i != currentPlayer){
    #####: 1232:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1233:	  state->discardCount[i]++;
    #####: 1234:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1235:	}
        -: 1236:      }
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case treasure_map:
        -: 1240:      //search hand for another treasure_map
    #####: 1241:      index = -1;
    #####: 1242:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1243:	{
    #####: 1244:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1245:	    {
    #####: 1246:	      index = i;
    #####: 1247:	      break;
        -: 1248:	    }
        -: 1249:	}
    #####: 1250:      if (index > -1)
        -: 1251:	{
        -: 1252:	  //trash both treasure cards
    #####: 1253:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1254:	  discardCard(index, currentPlayer, state, 1);
        -: 1255:
        -: 1256:	  //gain 4 Gold cards
    #####: 1257:	  for (i = 0; i < 4; i++)
        -: 1258:	    {
    #####: 1259:	      gainCard(gold, state, 1, currentPlayer);
        -: 1260:	    }
        -: 1261:				
        -: 1262:	  //return success
    #####: 1263:	  return 1;
        -: 1264:	}
        -: 1265:			
        -: 1266:      //no second treasure_map found in hand
    #####: 1267:      return -1;
        -: 1268:    }
        -: 1269:	
    #####: 1270:  return -1;
        -: 1271:}
        -: 1272:
       57: 1273:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1274:{
        -: 1275:	
        -: 1276:  //if card is not trashed, added to Played pile 
       57: 1277:  if (trashFlag < 1)
        -: 1278:    {
        -: 1279:      //add card to played pile
       57: 1280:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       57: 1281:      state->playedCardCount++;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //set played card to -1
       57: 1285:  state->hand[currentPlayer][handPos] = -1;
        -: 1286:	
        -: 1287:  //remove card from player's hand
       57: 1288:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
       57: 1293:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
        -: 1298:  else 	
        -: 1299:    {
        -: 1300:      //replace discarded card with last card in hand
       57: 1301:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1302:      //set last card to -1
       57: 1303:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1304:      //reduce number of cards in hand
       57: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        -: 1307:	
       57: 1308:  return 0;
        -: 1309:}
        -: 1310:
    #####: 1311:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1312:{
        -: 1313:  //Note: supplyPos is enum of choosen card
        -: 1314:	
        -: 1315:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1316:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //added card for [whoseTurn] current player:
        -: 1322:  // toFlag = 0 : add to discard
        -: 1323:  // toFlag = 1 : add to deck
        -: 1324:  // toFlag = 2 : add to hand
        -: 1325:
    #####: 1326:  if (toFlag == 1)
        -: 1327:    {
    #####: 1328:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1329:      state->deckCount[player]++;
        -: 1330:    }
    #####: 1331:  else if (toFlag == 2)
        -: 1332:    {
    #####: 1333:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1334:      state->handCount[player]++;
        -: 1335:    }
        -: 1336:  else
        -: 1337:    {
    #####: 1338:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1339:      state->discardCount[player]++;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //decrease number in supply pile
    #####: 1343:  state->supplyCount[supplyPos]--;
        -: 1344:	 
    #####: 1345:  return 0;
        -: 1346:}
        -: 1347:
       57: 1348:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1349:{
        -: 1350:  int i;
        -: 1351:	
        -: 1352:  //reset coin count
       57: 1353:  state->coins = 0;
        -: 1354:
        -: 1355:  //add coins for each Treasure card in player's hand
      342: 1356:  for (i = 0; i < state->handCount[player]; i++)
        -: 1357:    {
      285: 1358:      if (state->hand[player][i] == copper)
        -: 1359:	{
      219: 1360:	  state->coins += 1;
        -: 1361:	}
       66: 1362:      else if (state->hand[player][i] == silver)
        -: 1363:	{
    #####: 1364:	  state->coins += 2;
        -: 1365:	}
       66: 1366:      else if (state->hand[player][i] == gold)
        -: 1367:	{
    #####: 1368:	  state->coins += 3;
        -: 1369:	}	
        -: 1370:    }	
        -: 1371:
        -: 1372:  //add bonus
       57: 1373:  state->coins += bonus;
        -: 1374:
       57: 1375:  return 0;
        -: 1376:}
        -: 1377:
        -: 1378:
        -: 1379://end of dominion.c
        -: 1380:
