        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*TThis unit tests, the ability to buy cards
        -:    2:*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "assert.h"
        -:   10:
        -:   11:
        1:   12:int main(int argc, char ** argv){
        -:   13:    int returnValue;
        -:   14:    
        -:   15:    struct gameState G;
        -:   16:    //change these variables to test
        1:   17:    int players=2;
        1:   18:    int randomSeed=1;
        1:   19:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   20:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   21:    //create a hand to pass in
        -:   22:    
        -:   23:     //if game is created, print 
        1:   24:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   25:    assert(returnValue == 0);
        -:   26:    {
        1:   27:    printf("Unit Test 2:\n");
        1:   28:    printf("**Gamestate Created**\n");  
        1:   29:    printf("\n");
        -:   30:    }
        -:   31:    
        -:   32:    
        -:   33:    //in the random hande the user had silver and gold; the return should be 5
        1:   34:    returnValue=updateCoins(1, &G, 0);
        -:   35:    
        1:   36:    if(returnValue == 0){
        -:   37:    {
        1:   38:    printf("PASS: Coins were updated successful\n");
        1:   39:    printf("\n");
        -:   40:    }
        -:   41:    
        -:   42:        //five was randomy picked
        -:   43:        //silver and gold 2+3
        1:   44:    if(G.coins==5)
        -:   45:    {
    #####:   46:        printf("PASS: Coins value is correct\n");
    #####:   47:        printf("\n");
        -:   48:    }
        -:   49:        
        1:   50:      if(G.coins!=5)
        -:   51:    {
        1:   52:        printf("FAIL: Coins value is correct\n");
        1:   53:        printf("\n");
        -:   54:    }   
        -:   55:    
        -:   56:    }
        -:   57:    //test was a success
        1:   58:     printf("This test was a success");
        1:   59:    printf("\n");
        1:   60:    printf("\n");
        1:   61:  return 0;
        -:   62:}
