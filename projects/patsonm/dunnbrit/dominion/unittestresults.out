Unit Test 1:
**Gamestate Created**

0Fail: numHandCards Returns the correct value

This test was a success

Unit Test 2:
**Gamestate Created**

PASS: Coins were updated successful

FAIL: Coins value is correct

This test was a success

Unit Test 3:
**Gamestate Created**

Deck was shuffled succesfully

Deck was shuffled succesfully

This test was a success

Unit Test 4:
**Gamestate Created**

Card 0, Curse, Success:
Card 2, Estate, Success:
Card 3, Duchy, Success:
Fake Card Success:
This test was a success

Card Test 1:
Smithy:
**Gamestate Created**

PASS:smithy run
FAIL: Hand size was not increased
PASS: Hand size was decreased
PASS: Same Player is Active

 >>>>> SUCCESS: Testing complete smithy <<<<<

Card Test 2:
Great Hall:
**Gamestate Created**

PASS: Greathall ran
PASS: Same Player is Active
FAIL: Same number of actions left
PASS: Hand Count has increased

 >>>>> SUCCESS: Testing complete Great Hall <<<<<

Card Test 3:
adventure :
**Gamestate Created**

Pass: Card ran successfully
FAil: Two cards were not drawn
FAIL: There are not two treasure cards in hand

 >>>>> SUCCESS: Testing complete adventure <<<<<

Card Test 4:
Villager:
**Gamestate Created**

Pass: Card ran successfully
FAIL: Hand size was not increased
PASS: Hand size was decreased
PASS: Same Player is Active
FAIL: Same number of actions left
FAIL: Deck was NOT decreased
 >>>>> SUCCESS: Testing complete villager <<<<<

File 'unittest1.c'
Lines executed:90.91% of 22
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This unit test for numHandCards function
        -:    2:This functions returns the number of card in a hand
        -:    3://creates a game state
        -:    4://returns number of cards in hand
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include <stdio.h>
        -:    9:#include "rngs.h"
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "assert.h"
        -:   13:
        -:   14:
        1:   15:int main(int argc, char ** argv){
        -:   16:    int returnValue;
        -:   17:    struct gameState G;
        -:   18:    //change these variables to test
        1:   19:    int players=2;
        1:   20:    int randomSeed=1;
        1:   21:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   22:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   23:    //create a hand to pass in
        -:   24:    
        -:   25:    
        -:   26:    //if game is created, print 
        1:   27:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   28:    assert(returnValue == 0);
        -:   29:    
        1:   30:    printf("Unit Test 1:\n");
        1:   31:    printf("**Gamestate Created**\n");  
        1:   32:    printf("\n");
        -:   33:    
        -:   34:    int n;
        1:   35:    n = 10;
        -:   36:    
        1:   37:    returnValue=G.handCount[1];
        1:   38:    printf("%d", returnValue);
        1:   39:    if(returnValue == n)
        -:   40:    {
    #####:   41:    printf("PASS: numHandCards returns the correct value\n"); 
        -:   42:    //printf("%d", n);    
    #####:   43:    printf("\n");
        -:   44:    }
        -:   45:    
        1:   46:    if(returnValue != n)
        -:   47:    {
        1:   48:    printf("Fail: numHandCards Returns the correct value\n"); 
        -:   49:    //printf("%d", n);    
        1:   50:    printf("\n");
        -:   51:    }
        -:   52:    
        -:   53:    
        1:   54:    printf("This test was a success");
        1:   55:    printf("\n");
        1:   56:    printf("\n");
        -:   57:
        -:   58:    
        1:   59:    return 0;
        -:   60:    
        -:   61:    
        -:   62:    
        -:   63:}
File 'unittest2.c'
Lines executed:91.30% of 23
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*TThis unit tests, the ability to buy cards
        -:    2:*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "assert.h"
        -:   10:
        -:   11:
        1:   12:int main(int argc, char ** argv){
        -:   13:    int returnValue;
        -:   14:    
        -:   15:    struct gameState G;
        -:   16:    //change these variables to test
        1:   17:    int players=2;
        1:   18:    int randomSeed=1;
        1:   19:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   20:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   21:    //create a hand to pass in
        -:   22:    
        -:   23:     //if game is created, print 
        1:   24:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   25:    assert(returnValue == 0);
        -:   26:    {
        1:   27:    printf("Unit Test 2:\n");
        1:   28:    printf("**Gamestate Created**\n");  
        1:   29:    printf("\n");
        -:   30:    }
        -:   31:    
        -:   32:    
        -:   33:    //in the random hande the user had silver and gold; the return should be 5
        1:   34:    returnValue=updateCoins(1, &G, 0);
        -:   35:    
        1:   36:    if(returnValue == 0){
        -:   37:    {
        1:   38:    printf("PASS: Coins were updated successful\n");
        1:   39:    printf("\n");
        -:   40:    }
        -:   41:    
        -:   42:        //five was randomy picked
        -:   43:        //silver and gold 2+3
        1:   44:    if(G.coins==5)
        -:   45:    {
    #####:   46:        printf("PASS: Coins value is correct\n");
    #####:   47:        printf("\n");
        -:   48:    }
        -:   49:        
        1:   50:      if(G.coins!=5)
        -:   51:    {
        1:   52:        printf("FAIL: Coins value is correct\n");
        1:   53:        printf("\n");
        -:   54:    }   
        -:   55:    
        -:   56:    }
        -:   57:    //test was a success
        1:   58:     printf("This test was a success");
        1:   59:    printf("\n");
        1:   60:    printf("\n");
        1:   61:  return 0;
        -:   62:}
File 'unittest3.c'
Lines executed:100.00% of 23
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*TThis unit tests the shuffle ability
        -:    2:*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "assert.h"
        -:   10:
        -:   11:
        1:   12:int main(int argc, char ** argv){
        -:   13:    int returnValue, returnValue2;
        -:   14:    
        -:   15:    struct gameState G;
        -:   16:    //change these variables to test
        1:   17:    int players=2;
        1:   18:    int randomSeed=1;
        1:   19:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   20:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   21:    //create a hand to pass in
        -:   22:    
        -:   23:     //if game is created, print 
        1:   24:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   25:    if(returnValue == 0){
        -:   26:    {
        1:   27:    printf("Unit Test 3:\n");
        1:   28:    printf("**Gamestate Created**\n");  
        1:   29:    printf("\n");
        -:   30:    }
        -:   31:    
        -:   32:    //test a valid number
        1:   33:    G.deckCount[1] = 5;
        1:   34:	returnValue2 = shuffle(1, &G);
        1:   35:	if (returnValue2 == 0)
        -:   36:    {
        1:   37:    printf("Deck was shuffled succesfully\n");
        1:   38:    printf("\n");
        -:   39:    }
        -:   40:    
        -:   41:    //test a bad value for the deck size
        -:   42:    //a negative value should return 1
        1:   43:	G.deckCount[1] = -5;
        1:   44:	returnValue2 = shuffle(1, &G);
        -:   45:    
        1:   46:	if (returnValue2 == -1)
        -:   47:    {
        1:   48:    printf("Deck was shuffled succesfully\n");
        1:   49:    printf("\n");
        -:   50:    }
        -:   51:    }
        -:   52:    //test was a success
        1:   53:     printf("This test was a success");
        1:   54:    printf("\n");
        1:   55:    printf("\n");
        1:   56:  return 0;
        -:   57:}
        -:   58:
File 'unittest4.c'
Lines executed:89.19% of 37
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*TThis unit tests the getCostfunction
        -:    2:*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "assert.h"
        -:   10:
        -:   11:
        1:   12:int main(int argc, char ** argv)
        -:   13:{
        -:   14:    int returnValue, returnValue2;
        -:   15:    
        -:   16:    struct gameState G;
        -:   17:    //change these variables to test
        1:   18:    int players=2;
        1:   19:    int randomSeed=1;
        1:   20:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   21:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   22:    //create a hand to pass in
        -:   23:    
        -:   24:     //if game is created, print 
        1:   25:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   26:    assert(returnValue == 0);
        -:   27:    {
        1:   28:    printf("Unit Test 4:\n");
        1:   29:    printf("**Gamestate Created**\n");  
        1:   30:    printf("\n");
        -:   31:    }
        -:   32:    
        -:   33:   
        -:   34:	
        -:   35:	//curse
        1:   36:	returnValue = curse;
        1:   37:	returnValue2 = getCost(returnValue);
        1:   38:	if(returnValue2 == 0)
        -:   39:    {
        1:   40:    printf("Card 0, Curse, Success:\n");
        -:   41:    }
        1:   42:    if(returnValue2 != 0)
        -:   43:    {
    #####:   44:    printf("Card 0, Curse, Fail:\n");
        -:   45:    }
        -:   46:    
        -:   47:    //estate
        1:   48:    returnValue = estate;
        1:   49:	returnValue2 = getCost(returnValue);
        1:   50:	if(returnValue2 == 2)
        -:   51:    {
        1:   52:    printf("Card 2, Estate, Success:\n");
        -:   53:    }
        -:   54:    
        1:   55:    if(returnValue2 != 2)
        -:   56:       {
    #####:   57:    printf("Card 0, Estate, Fail:\n");
        -:   58:    }
        -:   59:    
        -:   60:    //duchy
        1:   61:    returnValue = duchy;
        1:   62:	returnValue2 = getCost(returnValue);
        1:   63:	if(returnValue2 == 5){
        -:   64:        
        1:   65:    printf("Card 3, Duchy, Success:\n");
        -:   66:    }
        1:   67:    if(returnValue2 != 5){
    #####:   68:    printf("Card 3, Duchy, Fail:\n");
        -:   69:    }
        -:   70:    
        -:   71:    
        -:   72:    //fakecard
        1:   73:    returnValue = -1;
        1:   74:	returnValue2 = getCost(returnValue);
        1:   75:	if(returnValue2 == -1){
        1:   76:    printf("Fake Card Success:\n");
        -:   77:    }
        1:   78:  if(returnValue2 != -1){
    #####:   79:    printf("Fake Card Fail:\n");
        -:   80:    }
        -:   81:    
        -:   82:    //test was a success
        1:   83:     printf("This test was a success");
        1:   84:    printf("\n");
        1:   85:    printf("\n");
        -:   86:  
        1:   87:       return 0;
        -:   88:       
        -:   89:
        -:   90:       }
        -:   91:       
        -:   92:
        -:   93:       
        -:   94:      
File 'cardtest1.c'
Lines executed:78.26% of 46
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This is the card test for the smithy
        -:    2:1. Current player should receive exactly 3 cards.
        -:    3:
        -:    4:2. 3 cards should come from his own pile.
        -:    5:
        -:    6:3. No state change should occur for other players.
        -:    7:
        -:    8:4. No state change should occur to the victory card piles and kingdom card piles.
        -:    9:
        -:   10:
        -:   11:int funcSmithy(struct gameState *state, int handPos)
        -:   12:{
        -:   13:    int i = 0;
        -:   14:    int currentPlayer = whoseTurn(state);
        -:   15:      //+3 Cards
        -:   16:    //BUG, <= was previouls <
        -:   17:      for (i = 0; i <= 3; i++)
        -:   18:	{
        -:   19:	  drawCard(currentPlayer, state);
        -:   20:	}
        -:   21:			
        -:   22:      //discard card from hand
        -:   23:      discardCard(handPos, currentPlayer, state, 0);
        -:   24:      return 0;
        -:   25:}
        -:   26:*/
        -:   27:
        -:   28:
        -:   29:#include "dominion.h"
        -:   30:#include <stdio.h>
        -:   31:#include "rngs.h"
        -:   32:#include <stdlib.h>
        -:   33:#include "dominion_helpers.h"
        -:   34:#include "assert.h"
        -:   35:#include "time.h"
        -:   36:#define TESTCARD "smithy"
        -:   37:
        1:   38:int main(){
        -:   39:    int returnValue;
        -:   40:    struct gameState G;
        -:   41:    //change these variables to test
        1:   42:    int players=2;
        1:   43:    int randomSeed=1;
        1:   44:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   45:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   46:    //create a hand to pass in
        -:   47:    
        -:   48:    
        -:   49:    //if game is created, print 
        1:   50:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   51:    assert(returnValue == 0);
        -:   52:    {
        1:   53:    printf("Card Test 1:\n");
        1:   54:    printf("Smithy:\n");
        1:   55:    printf("**Gamestate Created**\n");  
        1:   56:    printf("\n");
        -:   57:    }
        -:   58:    
        -:   59:    //intial hand count
        1:   60:    int handCount1=G.handCount[1];
        1:   61:    int player1=G.whoseTurn;
        1:   62:    int deckCountInitial= G.deckCount[1];
        -:   63:    //player should try three cards
        -:   64:  
        -:   65:	
        -:   66:	//test valid input
        -:   67:    
        1:   68:   returnValue = cardEffect(smithy, 0, 0, 0, &G, 10, 0);
        -:   69:	//returnValue = smithyFunc(&G, 4);
        -:   70:	
        -:   71:	
        1:   72:    if(returnValue==0)
        -:   73:    {
        1:   74:        printf("PASS:smithy run");
        1:   75:        printf("\n");
        -:   76:    }
        -:   77:    
        1:   78:    if(returnValue!=0)
        -:   79:    {
    #####:   80:        printf("FAIL: smithy not run");
    #####:   81:        printf("\n");
        -:   82:    }
        -:   83:    //second hand count
        1:   84:    int handCount2=G.handCount[1];
        1:   85:    int player2=G.whoseTurn;
        1:   86:    int deckCountInitial2= G.deckCount[1];
        -:   87:    
        1:   88:    if(handCount2>=(handCount1+3)){
    #####:   89:        printf("PASS: Hand size was increased");
    #####:   90:        printf("\n");
        -:   91:    }
        -:   92:    
        1:   93:    if(handCount2==handCount1){
        1:   94:        printf("FAIL: Hand size was not increased");
        1:   95:        printf("\n");
        -:   96:    }
        -:   97:    
        1:   98:    if(handCount2<=(handCount1+3)){
        1:   99:        printf("PASS: Hand size was decreased");
        1:  100:        printf("\n");
        -:  101:    }
        -:  102:    
        -:  103:    //still same palyer is active
        1:  104:    if(player1==player2){
        1:  105:    printf("PASS: Same Player is Active");
        1:  106:    printf("\n");
        -:  107:    }
        -:  108:    
        1:  109:    if(player1!=player2){
    #####:  110:    printf("FAIL: Same Player is not Active");
    #####:  111:    printf("\n");
        -:  112:    }       
        -:  113:        
        -:  114:    //deck count decreased    
        1:  115:    if(deckCountInitial>deckCountInitial2) {
    #####:  116:    printf("Pass: Deck was decreased");
    #####:  117:    printf("\n");}
        -:  118:        
        1:  119:    if(deckCountInitial<deckCountInitial2) {
    #####:  120:    printf("FAIL: Deck was NOT decreased");
    #####:  121:    printf("\n");}
        1:  122:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        1:  123:	return 0;
        -:  124:}
        -:  125:    
File 'cardtest2.c'
Lines executed:85.00% of 40
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This is the card test for the Greate hall
        -:    2:
        -:    3:int funcGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -:    4:        {
        -:    5:          //+1 Card
        -:    6:          drawCard(currentPlayer, state);
        -:    7:
        -:    8:          //+1 Actions
        -:    9:            //bug at -- instead of ++
        -:   10:          state->numActions--;
        -:   11:
        -:   12:          //discard card from hand
        -:   13:          discardCard(handPos, currentPlayer, state, 0);
        -:   14:          return 0;
        -:   15:        }
        -:   16:
        -:   17:
        -:   18://same player
        -:   19://+1 Card (increase hand)
        -:   20:    +1 Action(increase action)
        -:   21:*/
        -:   22:
        -:   23:
        -:   24:
        -:   25:#include "dominion.h"
        -:   26:#include <stdio.h>
        -:   27:#include "rngs.h"
        -:   28:#include <stdlib.h>
        -:   29:#include "dominion_helpers.h"
        -:   30:#include "assert.h"
        -:   31:#define TESTCARD "Great Hall"
        -:   32:
        1:   33:int main(){
        -:   34:    int returnValue;
        -:   35:    struct gameState G;
        -:   36:    //change these variables to test
        1:   37:    int players=2;
        1:   38:    int randomSeed=1;
        1:   39:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   40:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   41:    //create a hand to pass in
        -:   42:    
        -:   43:    
        -:   44:    //if game is created, print 
        1:   45:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   46:    assert(returnValue == 0);
        -:   47:    {
        1:   48:    printf("Card Test 2:\n");
        1:   49:    printf("Great Hall:\n");
        1:   50:    printf("**Gamestate Created**\n");  
        1:   51:    printf("\n");
        -:   52:    }
        -:   53:    
        -:   54:    
        1:   55:    int player1=G.whoseTurn;
        -:   56:    int player2;
        1:   57:    int actions=G.numActions;
        -:   58:    int actions2;
        1:   59:    int handCount1=G.handCount[1];
        -:   60:    int handCount2;
        -:   61:    //same player
        -:   62:    //+1 Card (increase hand)
        -:   63:    //+1 Action(increase action)
        -:   64:    int result;
        1:   65:    result= cardEffect(great_hall, 0, 0, 0, &G, 10, 0);
        1:   66:    if(result==0){
        1:   67:    printf("PASS: Greathall ran");
        1:   68:        printf("\n");
        -:   69:    
        1:   70:    player2=G.whoseTurn;
        1:   71:    if(player1==player2){
        1:   72:    printf("PASS: Same Player is Active");
        1:   73:    printf("\n");}
        -:   74:    
        1:   75:    if(player1!=player2){
    #####:   76:    printf("FAIL: Same Player is Active");
    #####:   77:    printf("\n");} 
        -:   78:        
        1:   79:    actions2=G.numActions;
        1:   80:    if(actions==actions2){
    #####:   81:    printf("PASS: Same number of actions left");
    #####:   82:    printf("\n");}
        -:   83:        
        1:   84:     if(actions!=actions2){
        1:   85:    printf("FAIL: Same number of actions left");
        1:   86:    printf("\n");}    
        -:   87:    
        1:   88:    handCount2=G.handCount[1];
        1:   89:    if(handCount2==handCount1){
        1:   90:    printf("PASS: Hand Count has increased");
        1:   91:    printf("\n");}
        -:   92:        
        1:   93:    if(handCount2!=handCount1){
    #####:   94:    printf("FAIL: Hand Count has increased");
    #####:   95:    printf("\n");}    
        -:   96:        
        -:   97:    }
        1:   98:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        1:   99:     return 0;
        -:  100:}
        -:  101:         
        -:  102:         
File 'cardtest3.c'
Lines executed:83.33% of 36
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/*Michael Patson*/
        -:    3://reveals cards from deck until two treasure
        -:    4:
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include <stdio.h>
        -:    8:#include "rngs.h"
        -:    9:#include <stdlib.h>
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "assert.h"
        -:   12:
        -:   13:#define TESTCARD "adventure"
        -:   14:
        -:   15:
        1:   16:int main()
        -:   17:{
        -:   18:    
        -:   19:    
        -:   20:    int returnValue;
        -:   21:    int count;
        -:   22:    struct gameState G;
        -:   23:    //change these variables to test
        1:   24:    int players=2;
        1:   25:    int randomSeed=1;
        1:   26:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, duchy, tribute};
        -:   27:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   28:    //create a hand to pass in
        -:   29:    
        -:   30:    
        1:   31:     printf("Card Test 3:\n");
        1:   32:    printf("adventure :\n");
        -:   33:    
        -:   34:    //if game is created, print 
        1:   35:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   36:    if(returnValue == 0){
        -:   37:    {
        -:   38:   
        1:   39:    printf("**Gamestate Created**\n");  
        1:   40:    printf("\n");
        -:   41:    }
        -:   42:	int intialHand;
        1:   43:     intialHand= G.handCount[G.whoseTurn];
        -:   44:	//check card value has changed
        -:   45:    
        -:   46:	
        1:   47:    returnValue=cardEffect(adventurer, 0, 0, 0, &G, 10, 0);
        1:   48:    if(returnValue==0){
        1:   49:    printf("Pass: Card ran successfully");
        1:   50:        printf("\n");}
        -:   51:    
        1:   52:     if(returnValue!=0){
    #####:   53:    printf("FAIL: Card did not run successfully");
    #####:   54:     printf("\n");}    
        -:   55:        
        -:   56:    int newHand;
        1:   57:    newHand= G.handCount[G.whoseTurn];
        1:   58:    if((intialHand+2)==newHand){
    #####:   59:    printf("PASS: New hand is two more, two cards were drawn");
    #####:   60:    printf("\n");}
        1:   61:     if((intialHand+2)!=newHand){
        1:   62:    printf("FAil: Two cards were not drawn");
        1:   63:     printf("\n");}
        -:   64:    int x;
        9:   65:    for(x = 0; x < G.handCount[G.whoseTurn]; x++){
        8:   66:		if (G.hand[G.whoseTurn][x] == copper || G.hand[G.whoseTurn][x] == silver || G.hand[G.whoseTurn][x] == gold){
        7:   67:			count++;
        -:   68:		}
        -:   69:			
        -:   70:        }
        1:   71:	if(count==2){
    #####:   72:    printf("PASS: Two Treasure Cards are in hand");
    #####:   73:    printf("\n");}
        1:   74:        if(count!=2){
        1:   75:    printf("FAIL: There are not two treasure cards in hand");
        1:   76:    printf("\n");}
        -:   77:    }
        1:   78:        printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   79:
        1:   80:	return 0;
        -:   81:}
File 'cardtest4.c'
Lines executed:81.13% of 53
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: The Villager card allows 
        -:    5: 
        -:    6: */
        -:    7:
        -:    8:/*
        -:    9: * Include the following lines in your makefile:
        -:   10: *
        -:   11: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   12: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   13: */
        -:   14:
        -:   15:
        -:   16:#include "dominion.h"
        -:   17:#include "dominion_helpers.h"
        -:   18:#include <string.h>
        -:   19:#include <stdio.h>
        -:   20:#include <assert.h>
        -:   21:#include "rngs.h"
        -:   22:#include <stdlib.h>
        -:   23:
        -:   24:#define TESTCARD "villager"
        -:   25:
        1:   26:int main() {
        -:   27:    
        -:   28:    int returnValue;
        -:   29:    struct gameState G;
        -:   30:    //change these variables to test
        1:   31:    int players=2;
        1:   32:    int randomSeed=1;
        1:   33:    int hand[10]={curse, smithy, mine, gardens, great_hall, salvager, sea_hag, adventurer, silver, gold};
        -:   34:    //int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
        -:   35:    //create a hand to pass in
        -:   36:    
        1:   37:    int player1=G.whoseTurn;
        -:   38:    int player2;
        1:   39:    int actions=G.numActions;
        -:   40:    int actions2;
        1:   41:    int handCount1=G.handCount[1];
        -:   42:    int handCount2;
        1:   43:    int deckCountInitial= G.deckCount[1];
        -:   44:    int deckCountInitial2;
        -:   45:    //if game is created, print 
        1:   46:    returnValue=initializeGame(players,hand,randomSeed, &G);
        1:   47:    assert(returnValue == 0);
        -:   48:    {
        1:   49:    printf("Card Test 4:\n");
        1:   50:    printf("Villager:\n");
        1:   51:    printf("**Gamestate Created**\n");  
        1:   52:    printf("\n");
        -:   53:    }    
        -:   54:    
        -:   55:    //call the card
        1:   56:    returnValue=cardEffect(great_hall, 0, 0, 0, &G, 10, 0);
        -:   57:    
        1:   58:    player2=G.whoseTurn;
        1:   59:    actions2=G.numActions;
        1:   60:    handCount2=G.handCount[1];
        1:   61:    deckCountInitial2= G.deckCount[1];
        -:   62:    
        1:   63:    if(returnValue==0){
        1:   64:    printf("Pass: Card ran successfully");
        1:   65:        printf("\n");}
        -:   66:    
        1:   67:    if(returnValue!=0){
    #####:   68:    printf("FAIL: Card did not run successfully");
    #####:   69:     printf("\n");}  
        -:   70:    
        -:   71:    
        -:   72:    
        1:   73:    if(handCount2>(handCount1)){
    #####:   74:        printf("PASS: Hand size was increased");
    #####:   75:        printf("\n");
        -:   76:    }
        -:   77:    
        1:   78:    if(handCount2==handCount1){
        1:   79:        printf("FAIL: Hand size was not increased");
        1:   80:        printf("\n");
        -:   81:    }
        -:   82:    
        1:   83:    if(handCount2<=(handCount1+1)){
        1:   84:        printf("PASS: Hand size was decreased");
        1:   85:        printf("\n");
        -:   86:    }
        -:   87:    
        -:   88:    //still same palyer is active
        1:   89:    if(player1==player2){
        1:   90:    printf("PASS: Same Player is Active");
        1:   91:    printf("\n");
        -:   92:    }
        -:   93:    
        1:   94:    if(player1!=player2){
    #####:   95:    printf("FAIL: Same Player is not Active");
    #####:   96:    printf("\n");
        -:   97:    }       
        -:   98:    
        -:   99:    
        1:  100:    if(actions==actions2){
    #####:  101:    printf("PASS: Same number of actions left");
    #####:  102:    printf("\n");}
        -:  103:        
        1:  104:     if(actions!=actions2){
        1:  105:    printf("FAIL: Same number of actions left");
        1:  106:    printf("\n");} 
        -:  107:    
        -:  108:    //deck count decreased    
        1:  109:    if(deckCountInitial>deckCountInitial2) {
    #####:  110:    printf("Pass: Deck was decreased");
    #####:  111:    printf("\n");}
        -:  112:        
        1:  113:    if(deckCountInitial<deckCountInitial2) {
        1:  114:    printf("FAIL: Deck was NOT decreased");
        -:  115:    }
        -:  116:    
        -:  117:    
        -:  118:    
        1:  119:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  120:    
        1:  121:return 0;    
        -:  122:    
        -:  123:}
        -:  124:
        -:  125:
File 'dominion.c'
Lines executed:20.11% of 567
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      178:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      165:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
        7:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        5:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
        7:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      158:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       67:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       47:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        1:  653:  int currentPlayer = whoseTurn(state);
        1:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        1:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        1:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        1:  660:  int z = 0;// this is the counter for the temp hand
        1:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //Refactor of 5 cards: adventurer, smithy, steward,salvager, council room into functions outside of the switch statement
        -:  667:
        -:  668:  //Adventurer Card
    #####:  669:  void adventurerCard(){
        -:  670:
    #####:  671:    int shuffleCount = 0;
        -:  672:
    #####:  673:    while(drawntreasure<=2){
    #####:  674:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  675:        //If deck has already been shuffled once then player stops drawing cards
    #####:  676:        if(shuffleCount > 0){
    #####:  677:          break;
        -:  678:        }
    #####:  679:        shuffle(currentPlayer, state);
    #####:  680:        shuffleCount++;      
        -:  681:      }
        -:  682:  
    #####:  683:      drawCard(currentPlayer, state);
    #####:  684:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  685:      
    #####:  686:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  687:        drawntreasure++;
        -:  688:      else{
    #####:  689:        temphand[z]=cardDrawn;
    #####:  690:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  691:        z++;
        -:  692:        }
        -:  693:
        -:  694:    }
        -:  695:      
    #####:  696:    while(z-1>=0){
    #####:  697:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  698:      z=z-1;
        -:  699:    }
        -:  700:
    #####:  701:  } 
        -:  702:
        -:  703:  //Smithy Card
    #####:  704:  void smithyCard(){
        -:  705:    //+3 Cards
    #####:  706:    drawCard(currentPlayer, state);
    #####:  707:    drawCard(currentPlayer, state);
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710: 
    #####:  711:  }
        -:  712:
        -:  713:  //Salvager Card
    #####:  714:  void salvagerCard(){
        -:  715:    //+1 buy
    #####:  716:    state->numBuys++;
        -:  717:      
        -:  718:    //gain coins equal to trashed card
    #####:  719:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:    //trash card
    #####:  721:    discardCard(choice1, currentPlayer, state, 1);  
        -:  722:
        -:  723:    //discard card
    #####:  724:    discardCard(handPos, currentPlayer, state, 0);
    #####:  725:  }
        -:  726:  
        -:  727:  //Council Room Card
    #####:  728:  void council_roomCard(){
        -:  729:    //+4 Cards
    #####:  730:    drawCard(currentPlayer, state);
    #####:  731:    drawCard(currentPlayer, state);
    #####:  732:    drawCard(currentPlayer, state);
    #####:  733:    drawCard(currentPlayer, state);
        -:  734:      
        -:  735:    //+1 Buy
    #####:  736:    state->numBuys++;
        -:  737:      
        -:  738:    //Each other player draws a card
    #####:  739:    for (i = 0; i < state->numPlayers; i++)
        -:  740:    {
        -:  741:
        -:  742:
    #####:  743:        drawCard(i, state);
        -:  744:
        -:  745:    }
        -:  746:      
        -:  747:    //put played card in played card pile
    #####:  748:    discardCard(handPos, currentPlayer, state, 0);
    #####:  749:  }
        -:  750:	
        -:  751:  //Steward Card
    #####:  752:  void stewardCard(){
    #####:  753:    if (choice1 == 1)
        -:  754:    {
        -:  755:      //+2 cards
    #####:  756:      for(i = 0; i < 2; i++){
    #####:  757:        drawCard(currentPlayer, state); 
        -:  758:      } 
        -:  759:    }
    #####:  760:    else if (choice1 == 2)
        -:  761:    {
        -:  762:      //+2 coins
    #####:  763:      state->coins = state->coins + 2;
        -:  764:    }
        -:  765:    else
        -:  766:    {
        -:  767:      //trash 2 cards in hand
    #####:  768:      discardCard(choice2, currentPlayer, state, 1);
    #####:  769:      discardCard(choice2, currentPlayer, state, 1);
        -:  770:    }
        -:  771:      
        -:  772:    //discard card from hand
    #####:  773:    discardCard(handPos, currentPlayer, state, 0);
    #####:  774:  }
        -:  775:
        -:  776:
        -:  777:
        -:  778:  //uses switch to select card and perform actions
        1:  779:  switch( card ) 
        -:  780:    {
        -:  781:    case adventurer:
    #####:  782:      adventurerCard();
    #####:  783:      return 0;
        -:  784:			
        -:  785:    case council_room:
    #####:  786:      council_roomCard();
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case feast:
        -:  790:      //gain card with cost up to 5
        -:  791:      //Backup hand
    #####:  792:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  793:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  794:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  795:      }
        -:  796:      //Backup hand
        -:  797:
        -:  798:      //Update Coins for Buy
    #####:  799:      updateCoins(currentPlayer, state, 5);
    #####:  800:      x = 1;//Condition to loop on
    #####:  801:      while( x == 1) {//Buy one card
    #####:  802:	if (supplyCount(choice1, state) <= 0){
        -:  803:	  if (DEBUG)
        -:  804:	    printf("None of that card left, sorry!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  808:	  }
        -:  809:	}
    #####:  810:	else if (state->coins < getCost(choice1)){
    #####:  811:	  printf("That card is too expensive!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  815:	  }
        -:  816:	}
        -:  817:	else{
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
    #####:  823:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  824:	  x = 0;//No more buying cards
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        -:  830:	}
        -:  831:      }     
        -:  832:
        -:  833:      //Reset Hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  835:	state->hand[currentPlayer][i] = temphand[i];
    #####:  836:	temphand[i] = -1;
        -:  837:      }
        -:  838:      //Reset Hand
        -:  839:      			
    #####:  840:      return 0;
        -:  841:			
        -:  842:    case gardens:
    #####:  843:      return -1;
        -:  844:			
        -:  845:    case mine:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:		
    #####:  853:      if (choice2 > treasure_map || choice2 < curse)
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 2, currentPlayer);
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
    #####:  874:	      break;
        -:  875:	    }
        -:  876:	}
        -:  877:			
    #####:  878:      return 0;
        -:  879:			
        -:  880:    case remodel:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 0, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
    #####:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:
        -:  903:
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case smithy:
    #####:  907:      smithyCard();
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case village:
        -:  911:      //+1 Card
    #####:  912:      drawCard(currentPlayer, state);
        -:  913:			
        -:  914:      //+2 Actions
    #####:  915:      state->numActions = state->numActions + 2;
        -:  916:			
        -:  917:      //discard played card from hand
    #####:  918:      discardCard(handPos, currentPlayer, state, 0);
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case baron:
    #####:  922:      state->numBuys++;//Increase buys by 1!
    #####:  923:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  924:	int p = 0;//Iterator for hand!
    #####:  925:	int card_not_discarded = 1;//Flag for discard set!
    #####:  926:	while(card_not_discarded){
    #####:  927:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  928:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  929:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  930:	    state->discardCount[currentPlayer]++;
    #####:  931:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  932:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  933:	    }
    #####:  934:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  935:	    state->handCount[currentPlayer]--;
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
    #####:  938:	  else if (p > state->handCount[currentPlayer]){
        -:  939:	    if(DEBUG) {
        -:  940:	      printf("No estate cards in your hand, invalid choice\n");
        -:  941:	      printf("Must gain an estate if there are any\n");
        -:  942:	    }
    #####:  943:	    if (supplyCount(estate, state) > 0){
    #####:  944:	      gainCard(estate, state, 0, currentPlayer);
    #####:  945:	      state->supplyCount[estate]--;//Decrement estates
    #####:  946:	      if (supplyCount(estate, state) == 0){
    #####:  947:		isGameOver(state);
        -:  948:	      }
        -:  949:	    }
    #####:  950:	    card_not_discarded = 0;//Exit the loop
        -:  951:	  }
        -:  952:			    
        -:  953:	  else{
    #####:  954:	    p++;//Next card
        -:  955:	  }
        -:  956:	}
        -:  957:      }
        -:  958:			    
        -:  959:      else{
    #####:  960:	if (supplyCount(estate, state) > 0){
    #####:  961:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  962:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  963:	  if (supplyCount(estate, state) == 0){
    #####:  964:	    isGameOver(state);
        -:  965:	  }
        -:  966:	}
        -:  967:      }
        -:  968:	    
        -:  969:      
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case great_hall:
        -:  973:      //+1 Card
        1:  974:      drawCard(currentPlayer, state);
        -:  975:			
        -:  976:      //+1 Actions
        1:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
        1:  980:      discardCard(handPos, currentPlayer, state, 0);
        1:  981:      return 0;
        -:  982:		
        -:  983:    case minion:
        -:  984:      //+1 action
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
        -:  989:			
    #####:  990:      if (choice1)		//+2 coins
        -:  991:	{
    #####:  992:	  state->coins = state->coins + 2;
        -:  993:	}
        -:  994:			
    #####:  995:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  996:	{
        -:  997:	  //discard hand
    #####:  998:	  while(numHandCards(state) > 0)
        -:  999:	    {
    #####: 1000:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1001:	    }
        -: 1002:				
        -: 1003:	  //draw 4
    #####: 1004:	  for (i = 0; i < 4; i++)
        -: 1005:	    {
    #####: 1006:	      drawCard(currentPlayer, state);
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //other players discard hand and redraw if hand size > 4
    #####: 1010:	  for (i = 0; i < state->numPlayers; i++)
        -: 1011:	    {
    #####: 1012:	      if (i != currentPlayer)
        -: 1013:		{
    #####: 1014:		  if ( state->handCount[i] > 4 )
        -: 1015:		    {
        -: 1016:		      //discard hand
    #####: 1017:		      while( state->handCount[i] > 0 )
        -: 1018:			{
    #####: 1019:			  discardCard(handPos, i, state, 0);
        -: 1020:			}
        -: 1021:							
        -: 1022:		      //draw 4
    #####: 1023:		      for (j = 0; j < 4; j++)
        -: 1024:			{
    #####: 1025:			  drawCard(i, state);
        -: 1026:			}
        -: 1027:		    }
        -: 1028:		}
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case steward:
    #####: 1035:      stewardCard();
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case tribute:
    #####: 1039:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1040:	if (state->deckCount[nextPlayer] > 0){
    #####: 1041:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	  state->deckCount[nextPlayer]--;
        -: 1043:	}
    #####: 1044:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1045:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1046:	  state->discardCount[nextPlayer]--;
        -: 1047:	}
        -: 1048:	else{
        -: 1049:	  //No Card to Reveal
        -: 1050:	  if (DEBUG){
        -: 1051:	    printf("No cards to reveal\n");
        -: 1052:	  }
        -: 1053:	}
        -: 1054:      }
        -: 1055:	    
        -: 1056:      else{
    #####: 1057:	if (state->deckCount[nextPlayer] == 0){
    #####: 1058:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1059:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1060:	    state->deckCount[nextPlayer]++;
    #####: 1061:	    state->discard[nextPlayer][i] = -1;
    #####: 1062:	    state->discardCount[nextPlayer]--;
        -: 1063:	  }
        -: 1064:			    
    #####: 1065:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1066:	} 
    #####: 1067:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1068:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1069:	state->deckCount[nextPlayer]--;
    #####: 1070:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:	state->deckCount[nextPlayer]--;
        -: 1073:      }    
        -: 1074:		       
    #####: 1075:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1076:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1077:	state->playedCardCount++;
    #####: 1078:	tributeRevealedCards[1] = -1;
        -: 1079:      }
        -: 1080:
    #####: 1081:      for (i = 0; i <= 2; i ++){
    #####: 1082:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1083:	  state->coins += 2;
        -: 1084:	}
        -: 1085:		    
    #####: 1086:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1087:	  drawCard(currentPlayer, state);
    #####: 1088:	  drawCard(currentPlayer, state);
        -: 1089:	}
        -: 1090:	else{//Action Card
    #####: 1091:	  state->numActions = state->numActions + 2;
        -: 1092:	}
        -: 1093:      }
        -: 1094:	    
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case ambassador:
    #####: 1098:      j = 0;		//used to check if player has enough cards to discard
        -: 1099:
    #####: 1100:      if (choice2 > 2 || choice2 < 0)
        -: 1101:	{
    #####: 1102:	  return -1;				
        -: 1103:	}
        -: 1104:
    #####: 1105:      if (choice1 == handPos)
        -: 1106:	{
    #####: 1107:	  return -1;
        -: 1108:	}
        -: 1109:
    #####: 1110:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:	{
    #####: 1112:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1113:	    {
    #####: 1114:	      j++;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (j < choice2)
        -: 1118:	{
    #####: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
        -: 1122:      if (DEBUG) 
        -: 1123:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1124:
        -: 1125:      //increase supply count for choosen card by amount being discarded
    #####: 1126:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1127:			
        -: 1128:      //each other player gains a copy of revealed card
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1134:	    }
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
        -: 1140:      //trash copies of cards returned to supply
    #####: 1141:      for (j = 0; j < choice2; j++)
        -: 1142:	{
    #####: 1143:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	    {
    #####: 1145:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1146:		{
    #####: 1147:		  discardCard(i, currentPlayer, state, 1);
    #####: 1148:		  break;
        -: 1149:		}
        -: 1150:	    }
        -: 1151:	}			
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:		
        -: 1155:    case cutpurse:
        -: 1156:
    #####: 1157:      updateCoins(currentPlayer, state, 2);
    #####: 1158:      for (i = 0; i < state->numPlayers; i++)
        -: 1159:	{
    #####: 1160:	  if (i != currentPlayer)
        -: 1161:	    {
    #####: 1162:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1163:		{
    #####: 1164:		  if (state->hand[i][j] == copper)
        -: 1165:		    {
    #####: 1166:		      discardCard(j, i, state, 0);
    #####: 1167:		      break;
        -: 1168:		    }
    #####: 1169:		  if (j == state->handCount[i])
        -: 1170:		    {
    #####: 1171:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1172:			{
        -: 1173:			  if (DEBUG)
        -: 1174:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1175:			}	
    #####: 1176:		      break;
        -: 1177:		    }		
        -: 1178:		}
        -: 1179:					
        -: 1180:	    }
        -: 1181:				
        -: 1182:	}				
        -: 1183:
        -: 1184:      //discard played card from hand
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1186:
    #####: 1187:      return 0;
        -: 1188:
        -: 1189:		
        -: 1190:    case embargo: 
        -: 1191:      //+2 Coins
    #####: 1192:      state->coins = state->coins + 2;
        -: 1193:			
        -: 1194:      //see if selected pile is in play
    #####: 1195:      if ( state->supplyCount[choice1] == -1 )
        -: 1196:	{
    #####: 1197:	  return -1;
        -: 1198:	}
        -: 1199:			
        -: 1200:      //add embargo token to selected supply pile
    #####: 1201:      state->embargoTokens[choice1]++;
        -: 1202:			
        -: 1203:      //trash card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case outpost:
        -: 1208:      //set outpost flag
    #####: 1209:      state->outpostPlayed++;
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case salvager:
    #####: 1216:      salvagerCard();
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case sea_hag:
    #####: 1220:      for (i = 0; i < state->numPlayers; i++){
    #####: 1221:	if (i != currentPlayer){
    #####: 1222:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1223:	  state->discardCount[i]++;
    #####: 1224:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1225:	}
        -: 1226:      }
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case treasure_map:
        -: 1230:      //search hand for another treasure_map
    #####: 1231:      index = -1;
    #####: 1232:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:	{
    #####: 1234:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1235:	    {
    #####: 1236:	      index = i;
    #####: 1237:	      break;
        -: 1238:	    }
        -: 1239:	}
    #####: 1240:      if (index > -1)
        -: 1241:	{
        -: 1242:	  //trash both treasure cards
    #####: 1243:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1244:	  discardCard(index, currentPlayer, state, 1);
        -: 1245:
        -: 1246:	  //gain 4 Gold cards
    #####: 1247:	  for (i = 0; i < 4; i++)
        -: 1248:	    {
    #####: 1249:	      gainCard(gold, state, 1, currentPlayer);
        -: 1250:	    }
        -: 1251:				
        -: 1252:	  //return success
    #####: 1253:	  return 1;
        -: 1254:	}
        -: 1255:			
        -: 1256:      //no second treasure_map found in hand
    #####: 1257:      return -1;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return -1;
        -: 1261:}
        -: 1262:
        1: 1263:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1264:{
        -: 1265:	
        -: 1266:  //if card is not trashed, added to Played pile 
        1: 1267:  if (trashFlag < 1)
        -: 1268:    {
        -: 1269:      //add card to played pile
        1: 1270:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1271:      state->playedCardCount++;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //set played card to -1
        1: 1275:  state->hand[currentPlayer][handPos] = -1;
        -: 1276:	
        -: 1277:  //remove card from player's hand
        1: 1278:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        1: 1283:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:  else 	
        -: 1289:    {
        -: 1290:      //replace discarded card with last card in hand
        1: 1291:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1292:      //set last card to -1
        1: 1293:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1294:      //reduce number of cards in hand
        1: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
        -: 1297:	
        1: 1298:  return 0;
        -: 1299:}
        -: 1300:
    #####: 1301:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1302:{
        -: 1303:  //Note: supplyPos is enum of choosen card
        -: 1304:	
        -: 1305:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1306:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1307:    {
    #####: 1308:      return -1;
        -: 1309:    }
        -: 1310:	
        -: 1311:  //added card for [whoseTurn] current player:
        -: 1312:  // toFlag = 0 : add to discard
        -: 1313:  // toFlag = 1 : add to deck
        -: 1314:  // toFlag = 2 : add to hand
        -: 1315:
    #####: 1316:  if (toFlag == 1)
        -: 1317:    {
    #####: 1318:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1319:      state->deckCount[player]++;
        -: 1320:    }
    #####: 1321:  else if (toFlag == 2)
        -: 1322:    {
    #####: 1323:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1324:      state->handCount[player]++;
        -: 1325:    }
        -: 1326:  else
        -: 1327:    {
    #####: 1328:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1329:      state->discardCount[player]++;
        -: 1330:    }
        -: 1331:	
        -: 1332:  //decrease number in supply pile
    #####: 1333:  state->supplyCount[supplyPos]--;
        -: 1334:	 
    #####: 1335:  return 0;
        -: 1336:}
        -: 1337:
        1: 1338:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1339:{
        -: 1340:  int i;
        -: 1341:	
        -: 1342:  //reset coin count
        1: 1343:  state->coins = 0;
        -: 1344:
        -: 1345:  //add coins for each Treasure card in player's hand
        6: 1346:  for (i = 0; i < state->handCount[player]; i++)
        -: 1347:    {
        5: 1348:      if (state->hand[player][i] == copper)
        -: 1349:	{
        4: 1350:	  state->coins += 1;
        -: 1351:	}
        1: 1352:      else if (state->hand[player][i] == silver)
        -: 1353:	{
    #####: 1354:	  state->coins += 2;
        -: 1355:	}
        1: 1356:      else if (state->hand[player][i] == gold)
        -: 1357:	{
    #####: 1358:	  state->coins += 3;
        -: 1359:	}	
        -: 1360:    }	
        -: 1361:
        -: 1362:  //add bonus
        1: 1363:  state->coins += bonus;
        -: 1364:
        1: 1365:  return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
